{"version":3,"sources":["components/Visor/Visor.tsx","components/Button/Button.tsx","components/Calculator/hooks/useDigits.tsx","components/Calculator/Calculator.tsx","serviceWorker.ts","index.tsx"],"names":["visorStyle","margin","textAlign","fontSize","backgroundColor","color","padding","borderRadius","props","style","data-testid","id","value","buttonStyle","height","onClick","cb","text","isNumber","char","test","useAddDigit","useState","display","setDisplay","viewDigits","join","addDigit","useCallback","digit","oldDigit","slice","givenOperands","length","operands","operators","filter","op","map","i","Number","reduce","prev","curr","toString","resolveEquation","chars","v","allNumber","Array","mainStyle","width","digitsContainerStyle","gridTemplateColumns","calculatorDigits","split","Visor","Button","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2KAMMA,G,MAAkC,CACpCC,OAAQ,OACRC,UAAW,QACXC,SAAU,MACVC,gBAAiB,OACjBC,MAAO,OACPC,QAAS,OACTC,aAAc,QAGH,WAACC,GAAD,OAAwB,yBAAKC,MAAOT,EAAYU,cAAY,QAAQC,GAAG,SAASH,EAAMI,OAAS,MCTxGC,EAAmC,CACrCC,OAAQ,OACRb,OAAQ,QAGG,WAACO,GAAD,OAAyB,4BAAQC,MAAOI,EAAaE,QAASP,EAAMQ,IAAKR,EAAMS,O,qBCVxFC,EAAW,SAACC,GAAD,MAAkB,QAAQC,KAAKD,IA8BnCE,EAAc,WAAO,IAAD,EACCC,mBAAmB,IADpB,mBACtBC,EADsB,KACbC,EADa,KAoB7B,MAAO,CAAEC,WAFU,kBAAMF,EAAQG,KAAK,MAEjBC,SAlBJC,uBAAY,SAACC,GAC1B,IAAIC,EAAmBP,EAAQQ,OAAO,GAAGL,OACzC,OAAQG,GACJ,IAAK,IACD,OAAOL,EAAW,IACtB,IAAK,IACD,OAAOA,EAhCC,SAACQ,GACrB,GAA6B,IAAzBA,EAAcC,OAAc,MAAO,CAAC,KACxC,GAAID,EAAcC,QAAU,EAAG,OAAOD,EAEtC,IAAIE,EAAWhB,EAASc,EAAc,IAAvB,CACR,KADQ,mBACAA,IACTA,EAIFG,GAHJD,EAAWA,EAASD,OAAS,IAAM,EAC7BC,EACAA,EAASH,OAAO,IACGK,QAAO,SAAAC,GAAE,OAAKnB,EAASmB,MAWhD,MAAO,EAVPH,EAAWA,EAASE,QAAO,SAAAC,GAAE,OAAInB,EAASmB,OAG7BC,KAAI,SAACD,EAAIE,GACN,MAAwB,MAAjBJ,EAAUI,GACXC,OAAOH,GACPG,QAAQH,MAEjBI,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,IAAM,GAErCC,YAWkBC,CAAgBtB,IACtC,SAtCM,WAAkC,IAAD,uBAA7BuB,EAA6B,yBAA7BA,EAA6B,gBAC/C,OAAOA,EACFR,KAAI,SAAAS,GAAC,OAAI7B,EAAS6B,MAClBN,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAAQC,KAoCpBK,CAAUlB,EAAUD,GAGpBL,EAAW,YAAIyB,MAAL,YAAsB1B,GAAtB,QAA+BM,MAFzCL,EAAW,YAAIyB,MAAL,YAAsB1B,EAAQQ,MAAM,GAAI,IAAxC,kBAA+CD,GAA/C,OAA0DD,UAMjF,CAACN,MC5CF2B,EAAiC,CACnCjD,OAAQ,YACRkD,MAAO,SAELC,EAA4C,CAC9C7B,QAAS,OACT8B,oBAAqB,uBAGV,aACX,IAAMC,EAAmB,iBAAiBC,MAAM,IAD/B,EAEgBlC,IAAzBM,EAFS,EAETA,SAAUF,EAFD,EAECA,WAClB,OAAQ,0BAAMhB,MAAOyC,GACjB,kBAACM,EAAD,CAAO5C,MAAOa,MACd,yBAAKhB,MAAO2C,GACPE,EAAiBhB,KAAI,SAACT,GAAD,OAAmB,kBAAC4B,EAAD,CAAQC,IAAG,eAAU7B,GAASZ,KAAMY,EAAOb,GAAI,WAAQW,EAASE,YCRjG8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b3be0df4.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface IVisorProps {\n    value?: string\n}\n\nconst visorStyle: React.CSSProperties = {\n    margin: '10px',\n    textAlign: 'right',\n    fontSize: '3em',\n    backgroundColor: '#333',\n    color: '#ddd',\n    padding: '10px',\n    borderRadius: '5px'\n}\n\nexport default (props: IVisorProps) => <div style={visorStyle} data-testid='visor' id='visor'>{props.value || '0'}</div>;","import React from 'react';\n\nexport interface IButtonProps {\n    text: string;\n    cb: any;\n}\n\nconst buttonStyle: React.CSSProperties = {\n    height: '60px',\n    margin: '10px'\n}\n\nexport default (props: IButtonProps) => <button style={buttonStyle} onClick={props.cb}>{props.text}</button>","import { useState, useCallback } from \"react\"\n\nconst isNumber = (char: string) => /[0-9]/.test(char);\nconst allNumber = (...chars: string[]): boolean => { \n    return chars\n        .map(v => isNumber(v))\n        .reduce((prev, curr) => prev && curr)\n}\nconst resolveEquation = (givenOperands: string[]): string[] => {\n    if (givenOperands.length === 0) return ['0'];\n    if (givenOperands.length <= 2) return givenOperands;\n    \n    let operands = isNumber(givenOperands[0])\n        ? ['+', ...givenOperands]\n        : givenOperands;\n    operands = operands.length % 2 === 0\n        ? operands\n        : operands.slice(-1);\n    let operators = operands.filter(op => !isNumber(op));\n    operands = operands.filter(op => isNumber(op));\n    \n    let acc = operands\n                .map((op, i) => {\n                    return operators[i] === '+'\n                        ? Number(op)\n                        : Number(-op)\n                })\n                .reduce((prev, curr) => prev + curr, 0)\n\n    return [acc.toString()];\n}\n\nexport const useAddDigit = () => {\n    const [display, setDisplay] = useState<string[]>([]);\n    const addDigit = useCallback((digit: string) => {\n        let oldDigit: string = display.slice(-1).join();\n        switch (digit) {\n            case 'c':\n                return setDisplay([]);\n            case '=':\n                return setDisplay(resolveEquation(display));\n            default:\n                if (allNumber(oldDigit, digit)) {\n                    setDisplay(new Array<string>(...display.slice(0, -1), `${oldDigit}${digit}`));\n                } else {\n                    setDisplay(new Array<string>(...display, digit));\n                }\n        }\n\n    }, [display]);\n    const viewDigits = () => display.join(' ');\n\n    return { viewDigits, addDigit };\n}","import React from 'react';\nimport Visor from '../Visor';\nimport Button from '../Button';\nimport { useAddDigit } from './hooks';\n\nconst mainStyle: React.CSSProperties = {\n    margin: '20px auto',\n    width: '600px'\n}\nconst digitsContainerStyle: React.CSSProperties = {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto auto auto'\n}\n\nexport default () => {\n    const calculatorDigits = '789+456-123c0='.split('');\n    const { addDigit, viewDigits } = useAddDigit();\n    return (<main style={mainStyle}>\n        <Visor value={viewDigits()} />\n        <div style={digitsContainerStyle}>\n            {calculatorDigits.map((digit: string) => <Button key={`digit${digit}`} text={digit} cb={() => { addDigit(digit) }} />)}\n        </div>\n    </main>)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './components/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}